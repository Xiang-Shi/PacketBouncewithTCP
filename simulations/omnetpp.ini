[General]
network = PacketBouncewithTCP

#record-eventlog = true
#**.tcp.module-eventlog-recording = true

# Other NED file modification 
# in TCP.ned: maximum receiver buffer capacity of tcp
# in DropTail.ned: the default queue length


#client setting
# requestLength : length of a request
# replyLength ： length of a reply
# thinkTime ： time gap between requests
# idleInterval ： time gap between sessions
# numRequestsPerSession = default(1);


**.client.hasTcp = true
**.tcp.timestampSupport = true                      # Timestamps (RFC 1323) support (header option) (TS will be enabled for a connection if both endpoints support it)
#**.tcp.windowScalingSupport = true
#**.tcp.windowScalingFactor = 6
**.tcp.advertisedWindow = 45535      # mss = 536
**.tcp.tcpAlgorithmClass = "TCPTahoeNoCongestionControl"

**.client.numTcpApps = 3


**.client.tcpApp[*].typename = "TCPBasicClientApp"
**.client.tcpApp[*].dataTransferMode = "object"


**.client.tcpApp[*].startTime = 0s
**.client.tcpApp[*].stopTime = 10s
**.client.tcpApp[*].thinkTime = 1s
**.client.tcpApp[*].idleInterval = 1000s
**.client.tcpApp[*].reconnectInterval = 50s
**.client.tcpApp[*].numRequestsPerSession = 4


**.client.tcpApp[0].connectAddress = "server1"
**.client.tcpApp[1].connectAddress = "server2"
**.client.tcpApp[2].connectAddress = "server3"


#server setting
PacketBouncewithTCP.server1.hasTcp = true
PacketBouncewithTCP.server1.numTcpApps = 1
PacketBouncewithTCP.server1.tcpApp[0].typename="TCPGenericSrvApp"

PacketBouncewithTCP.server2.hasTcp = true
PacketBouncewithTCP.server2.numTcpApps = 1
PacketBouncewithTCP.server2.tcpApp[0].typename="TCPGenericSrvApp"

PacketBouncewithTCP.server3.hasTcp = true
PacketBouncewithTCP.server3.numTcpApps = 1
PacketBouncewithTCP.server3.tcpApp[0].typename="TCPGenericSrvApp"

#PacketBouncewithTCP.server.networkLayer.configurator.networkConfiguratorModule = "iPv4NetworkConfigurator"

